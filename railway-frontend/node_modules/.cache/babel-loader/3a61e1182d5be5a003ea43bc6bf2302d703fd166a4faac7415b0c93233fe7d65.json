{"ast":null,"code":"var _jsxFileName = \"/Users/daksh/Downloads/Personal/Railway SIH/Darnex/railway-frontend/src/RailwayMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport railsvg from \"./railsvgmap.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RailwayMap() {\n  _s();\n  const [stations, setStations] = useState([]);\n  const [trains, setTrains] = useState([]);\n\n  // fetch map-layout\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        var _data$layers, _data$layers2;\n        const res = await fetch(\"http://localhost:3001/api/map-layout\");\n        const data = await res.json();\n        console.log(\"map-layout:\", data);\n        setStations(((_data$layers = data.layers) === null || _data$layers === void 0 ? void 0 : _data$layers.stations) || []);\n        setTrains(((_data$layers2 = data.layers) === null || _data$layers2 === void 0 ? void 0 : _data$layers2.realtime) || []);\n      } catch (err) {\n        console.error(\"Error fetching map-layout:\", err);\n      }\n    }\n    fetchData();\n    const interval = setInterval(fetchData, 5000); // refresh every 5 sec\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDE86 Railway Live Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        display: \"inline-block\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: railsvg,\n        alt: \"Railway SVG Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          pointerEvents: \"none\" // donâ€™t block clicks\n        },\n        children: [stations.map((s, idx) => /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: 100 + Math.random() * 800 // temp random position\n          ,\n          cy: 100 + Math.random() * 200,\n          r: \"6\",\n          fill: \"green\",\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: s.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)\n        }, `station-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)), trains.map((t, idx) => /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: 200 + Math.random() * 600 // temp random position\n          ,\n          cy: 200 + Math.random() * 150,\n          r: \"6\",\n          fill: \"red\",\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: [\"Train \", t.train_id, \" (\", t.speed_kmph, \" km/h)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)\n        }, `train-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(RailwayMap, \"vl4/6C0x8OAgLBvSgg5OKScYA6w=\");\n_c = RailwayMap;\nvar _c;\n$RefreshReg$(_c, \"RailwayMap\");","map":{"version":3,"names":["React","useEffect","useState","railsvg","jsxDEV","_jsxDEV","RailwayMap","_s","stations","setStations","trains","setTrains","fetchData","_data$layers","_data$layers2","res","fetch","data","json","console","log","layers","realtime","err","error","interval","setInterval","clearInterval","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","position","display","src","alt","top","left","width","height","pointerEvents","map","s","idx","cx","Math","random","cy","r","fill","name","t","train_id","speed_kmph","_c","$RefreshReg$"],"sources":["/Users/daksh/Downloads/Personal/Railway SIH/Darnex/railway-frontend/src/RailwayMap.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport railsvg from \"./railsvgmap.svg\";\n\n\nexport default function RailwayMap() {\n  const [stations, setStations] = useState([]);\n  const [trains, setTrains] = useState([]);\n\n  // fetch map-layout\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch(\"http://localhost:3001/api/map-layout\");\n        const data = await res.json();\n        console.log(\"map-layout:\", data);\n\n        setStations(data.layers?.stations || []);\n        setTrains(data.layers?.realtime || []);\n      } catch (err) {\n        console.error(\"Error fetching map-layout:\", err);\n      }\n    }\n\n    fetchData();\n    const interval = setInterval(fetchData, 5000); // refresh every 5 sec\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1>ðŸš† Railway Live Map</h1>\n\n      {/* Embed your static SVG map */}\n      <div style={{ position: \"relative\", display: \"inline-block\" }}>\n        <img src={railsvg} alt=\"Railway SVG Map\" />\n\n        {/* Overlay SVG layer for dynamic dots */}\n        <svg\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\",\n            pointerEvents: \"none\", // donâ€™t block clicks\n          }}\n        >\n          {/* Green dots for stations */}\n          {stations.map((s, idx) => (\n            <circle\n              key={`station-${idx}`}\n              cx={100 + Math.random() * 800} // temp random position\n              cy={100 + Math.random() * 200}\n              r=\"6\"\n              fill=\"green\"\n            >\n              <title>{s.name}</title>\n            </circle>\n          ))}\n\n          {/* Red dots for trains */}\n          {trains.map((t, idx) => (\n            <circle\n              key={`train-${idx}`}\n              cx={200 + Math.random() * 600} // temp random position\n              cy={200 + Math.random() * 150}\n              r=\"6\"\n              fill=\"red\"\n            >\n              <title>Train {t.train_id} ({t.speed_kmph} km/h)</title>\n            </circle>\n          ))}\n        </svg>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}