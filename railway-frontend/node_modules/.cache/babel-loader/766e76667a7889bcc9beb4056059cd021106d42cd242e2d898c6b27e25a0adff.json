{"ast":null,"code":"var _jsxFileName = \"/Users/daksh/Downloads/Personal/Railway SIH/Darnex/railway-frontend/src/RailwayMap.jsx\",\n  _s = $RefreshSig$();\n// src/RailwayMap.jsx\nimport React, { useEffect, useState } from \"react\";\nimport railsvg from \"./railsvgmap.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RailwayMap() {\n  _s();\n  const [trains, setTrains] = useState([]);\n\n  // Fetch backend data periodically\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch(\"http://localhost:3001/api/map-layout\");\n        const data = await res.json();\n\n        // just take realtime trains for now\n        setTrains(data.layers.realtime || []);\n      } catch (err) {\n        console.error(\"Error fetching trains:\", err);\n      }\n    }\n    fetchData();\n    const interval = setInterval(fetchData, 5000); // refresh every 5s\n    return () => clearInterval(interval);\n  }, []);\n\n  // ðŸ”‘ Mapping (for demo: random positions, later we'll calculate exact positions)\n  const mapToSvgCoords = (train, index) => {\n    // TODO: use station/track mapping instead of random\n    const x = 100 + index * 60;\n    const y = 200 + index % 2 * 40;\n    return {\n      x,\n      y\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDE86 Railway Live Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: railsvg,\n      alt: \"Railway Map\",\n      style: {\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), trains.map((train, i) => {\n      const {\n        x,\n        y\n      } = mapToSvgCoords(train, i);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: y,\n          left: x,\n          width: \"12px\",\n          height: \"12px\",\n          borderRadius: \"50%\",\n          backgroundColor: \"red\",\n          transform: \"translate(-50%, -50%)\"\n        },\n        title: `Train ${train.train_id} - Speed: ${train.speed_kmph}km/h`\n      }, train.id || i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(RailwayMap, \"b108wzI25qLIUDtvQA3yPWDuTsA=\");\n_c = RailwayMap;\nvar _c;\n$RefreshReg$(_c, \"RailwayMap\");","map":{"version":3,"names":["React","useEffect","useState","railsvg","jsxDEV","_jsxDEV","RailwayMap","_s","trains","setTrains","fetchData","res","fetch","data","json","layers","realtime","err","console","error","interval","setInterval","clearInterval","mapToSvgCoords","train","index","x","y","style","position","width","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","map","i","top","left","height","borderRadius","backgroundColor","transform","title","train_id","speed_kmph","id","_c","$RefreshReg$"],"sources":["/Users/daksh/Downloads/Personal/Railway SIH/Darnex/railway-frontend/src/RailwayMap.jsx"],"sourcesContent":["// src/RailwayMap.jsx\nimport React, { useEffect, useState } from \"react\";\nimport railsvg from \"./railsvgmap.svg\";\n\nexport default function RailwayMap() {\n  const [trains, setTrains] = useState([]);\n\n  // Fetch backend data periodically\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch(\"http://localhost:3001/api/map-layout\");\n        const data = await res.json();\n\n        // just take realtime trains for now\n        setTrains(data.layers.realtime || []);\n      } catch (err) {\n        console.error(\"Error fetching trains:\", err);\n      }\n    }\n\n    fetchData();\n    const interval = setInterval(fetchData, 5000); // refresh every 5s\n    return () => clearInterval(interval);\n  }, []);\n\n  // ðŸ”‘ Mapping (for demo: random positions, later we'll calculate exact positions)\n  const mapToSvgCoords = (train, index) => {\n    // TODO: use station/track mapping instead of random\n    const x = 100 + index * 60;\n    const y = 200 + (index % 2) * 40;\n    return { x, y };\n  };\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", textAlign: \"center\" }}>\n      <h2>ðŸš† Railway Live Map</h2>\n\n      {/* SVG Map */}\n      <img src={railsvg} alt=\"Railway Map\" style={{ width: \"100%\" }} />\n\n      {/* Train overlays */}\n      {trains.map((train, i) => {\n        const { x, y } = mapToSvgCoords(train, i);\n        return (\n          <div\n            key={train.id || i}\n            style={{\n              position: \"absolute\",\n              top: y,\n              left: x,\n              width: \"12px\",\n              height: \"12px\",\n              borderRadius: \"50%\",\n              backgroundColor: \"red\",\n              transform: \"translate(-50%, -50%)\",\n            }}\n            title={`Train ${train.train_id} - Speed: ${train.speed_kmph}km/h`}\n          />\n        );\n      })}\n    </div>\n  );\n}\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACAD,SAAS,CAAC,MAAM;IACd,eAAeS,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,sCAAsC,CAAC;QAC/D,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;;QAE7B;QACAL,SAAS,CAACI,IAAI,CAACE,MAAM,CAACC,QAAQ,IAAI,EAAE,CAAC;MACvC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;MAC9C;IACF;IAEAP,SAAS,CAAC,CAAC;IACX,MAAMU,QAAQ,GAAGC,WAAW,CAACX,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;IAC/C,OAAO,MAAMY,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,cAAc,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACvC;IACA,MAAMC,CAAC,GAAG,GAAG,GAAGD,KAAK,GAAG,EAAE;IAC1B,MAAME,CAAC,GAAG,GAAG,GAAIF,KAAK,GAAG,CAAC,GAAI,EAAE;IAChC,OAAO;MAAEC,CAAC;MAAEC;IAAE,CAAC;EACjB,CAAC;EAED,oBACEtB,OAAA;IAAKuB,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEC,KAAK,EAAE,MAAM;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBACvE3B,OAAA;MAAA2B,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAG5B/B,OAAA;MAAKgC,GAAG,EAAElC,OAAQ;MAACmC,GAAG,EAAC,aAAa;MAACV,KAAK,EAAE;QAAEE,KAAK,EAAE;MAAO;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAGhE5B,MAAM,CAAC+B,GAAG,CAAC,CAACf,KAAK,EAAEgB,CAAC,KAAK;MACxB,MAAM;QAAEd,CAAC;QAAEC;MAAE,CAAC,GAAGJ,cAAc,CAACC,KAAK,EAAEgB,CAAC,CAAC;MACzC,oBACEnC,OAAA;QAEEuB,KAAK,EAAE;UACLC,QAAQ,EAAE,UAAU;UACpBY,GAAG,EAAEd,CAAC;UACNe,IAAI,EAAEhB,CAAC;UACPI,KAAK,EAAE,MAAM;UACba,MAAM,EAAE,MAAM;UACdC,YAAY,EAAE,KAAK;UACnBC,eAAe,EAAE,KAAK;UACtBC,SAAS,EAAE;QACb,CAAE;QACFC,KAAK,EAAE,SAASvB,KAAK,CAACwB,QAAQ,aAAaxB,KAAK,CAACyB,UAAU;MAAO,GAX7DzB,KAAK,CAAC0B,EAAE,IAAIV,CAAC;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAYnB,CAAC;IAEN,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC7B,EAAA,CA3DuBD,UAAU;AAAA6C,EAAA,GAAV7C,UAAU;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}