{"ast":null,"code":"var _jsxFileName = \"/Users/daksh/Downloads/Personal/Railway SIH/Darnex/railway-frontend/src/RailwayMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ReactComponent as RailwaySVG } from \"./assets/railsvgmap.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RailwayMap() {\n  _s();\n  var _mapData$layers, _mapData$layers$track, _mapData$layers2, _mapData$layers2$stat, _mapData$layers3, _mapData$layers3$real;\n  const [mapData, setMapData] = useState(null);\n\n  // Fetch backend map data\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch(\"http://localhost:3001/api/map-layout\");\n        const data = await res.json();\n        setMapData(data);\n      } catch (err) {\n        console.error(\"Error fetching map-layout:\", err);\n      }\n    }\n    fetchData();\n    const interval = setInterval(fetchData, 5000); // refresh every 5s\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(RailwaySVG, {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        pointerEvents: \"none\" // allow clicks to pass through\n      },\n      children: [mapData === null || mapData === void 0 ? void 0 : (_mapData$layers = mapData.layers) === null || _mapData$layers === void 0 ? void 0 : (_mapData$layers$track = _mapData$layers.tracks) === null || _mapData$layers$track === void 0 ? void 0 : _mapData$layers$track.map(t => /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: t.from_lon * 10 // scale lon/lat to match your SVG coords\n        ,\n        y1: t.from_lat * -10,\n        x2: t.to_lon * 10,\n        y2: t.to_lat * -10,\n        stroke: \"blue\",\n        strokeWidth: \"2\"\n      }, t.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)), mapData === null || mapData === void 0 ? void 0 : (_mapData$layers2 = mapData.layers) === null || _mapData$layers2 === void 0 ? void 0 : (_mapData$layers2$stat = _mapData$layers2.stations) === null || _mapData$layers2$stat === void 0 ? void 0 : _mapData$layers2$stat.map(s => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: s.lon * 10,\n          cy: s.lat * -10,\n          r: \"5\",\n          fill: \"green\",\n          stroke: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: s.lon * 10 + 8,\n          y: s.lat * -10,\n          fontSize: \"10\",\n          fill: \"black\",\n          children: s.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, s.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)), mapData === null || mapData === void 0 ? void 0 : (_mapData$layers3 = mapData.layers) === null || _mapData$layers3 === void 0 ? void 0 : (_mapData$layers3$real = _mapData$layers3.realtime) === null || _mapData$layers3$real === void 0 ? void 0 : _mapData$layers3$real.map(tr => {\n        const track = mapData.layers.tracks.find(t => t.id === tr.track_id);\n        if (!track) return null;\n\n        // interpolate position along track\n        const frac = tr.position_km / (track.distance_km || 1);\n        const x = track.from_lon * 10 + frac * (track.to_lon * 10 - track.from_lon * 10);\n        const y = track.from_lat * -10 + frac * (track.to_lat * -10 - track.from_lat * -10);\n        return /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: \"6\",\n          fill: \"red\",\n          stroke: \"black\"\n        }, tr.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(RailwayMap, \"tfr58apwqtG+o1X9ZCcq3mb3/DM=\");\n_c = RailwayMap;\nvar _c;\n$RefreshReg$(_c, \"RailwayMap\");","map":{"version":3,"names":["React","useEffect","useState","ReactComponent","RailwaySVG","jsxDEV","_jsxDEV","RailwayMap","_s","_mapData$layers","_mapData$layers$track","_mapData$layers2","_mapData$layers2$stat","_mapData$layers3","_mapData$layers3$real","mapData","setMapData","fetchData","res","fetch","data","json","err","console","error","interval","setInterval","clearInterval","style","position","width","height","children","fileName","_jsxFileName","lineNumber","columnNumber","top","left","pointerEvents","layers","tracks","map","t","x1","from_lon","y1","from_lat","x2","to_lon","y2","to_lat","stroke","strokeWidth","id","stations","s","cx","lon","cy","lat","r","fill","x","y","fontSize","name","realtime","tr","track","find","track_id","frac","position_km","distance_km","_c","$RefreshReg$"],"sources":["/Users/daksh/Downloads/Personal/Railway SIH/Darnex/railway-frontend/src/RailwayMap.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ReactComponent as RailwaySVG } from \"./assets/railsvgmap.svg\";\n\nexport default function RailwayMap() {\n  const [mapData, setMapData] = useState(null);\n\n  // Fetch backend map data\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch(\"http://localhost:3001/api/map-layout\");\n        const data = await res.json();\n        setMapData(data);\n      } catch (err) {\n        console.error(\"Error fetching map-layout:\", err);\n      }\n    }\n    fetchData();\n    const interval = setInterval(fetchData, 5000); // refresh every 5s\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100vh\" }}>\n      {/* Base static SVG */}\n      <RailwaySVG style={{ width: \"100%\", height: \"100%\" }} />\n\n      {/* Overlay a new SVG for dynamic elements */}\n      <svg\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          pointerEvents: \"none\", // allow clicks to pass through\n        }}\n      >\n        {/* Draw tracks */}\n        {mapData?.layers?.tracks?.map((t) => (\n          <line\n            key={t.id}\n            x1={t.from_lon * 10} // scale lon/lat to match your SVG coords\n            y1={t.from_lat * -10}\n            x2={t.to_lon * 10}\n            y2={t.to_lat * -10}\n            stroke=\"blue\"\n            strokeWidth=\"2\"\n          />\n        ))}\n\n        {/* Draw stations */}\n        {mapData?.layers?.stations?.map((s) => (\n          <g key={s.id}>\n            <circle\n              cx={s.lon * 10}\n              cy={s.lat * -10}\n              r=\"5\"\n              fill=\"green\"\n              stroke=\"black\"\n            />\n            <text\n              x={s.lon * 10 + 8}\n              y={s.lat * -10}\n              fontSize=\"10\"\n              fill=\"black\"\n            >\n              {s.name}\n            </text>\n          </g>\n        ))}\n\n        {/* Draw trains */}\n        {mapData?.layers?.realtime?.map((tr) => {\n          const track = mapData.layers.tracks.find((t) => t.id === tr.track_id);\n          if (!track) return null;\n\n          // interpolate position along track\n          const frac = tr.position_km / (track.distance_km || 1);\n          const x =\n            track.from_lon * 10 + frac * (track.to_lon * 10 - track.from_lon * 10);\n          const y =\n            track.from_lat * -10 + frac * (track.to_lat * -10 - track.from_lat * -10);\n\n          return (\n            <circle\n              key={tr.id}\n              cx={x}\n              cy={y}\n              r=\"6\"\n              fill=\"red\"\n              stroke=\"black\"\n            />\n          );\n        })}\n      </svg>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}